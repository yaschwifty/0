# Required libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Load and pre-process the dataset
file_path = 'uber_data.csv'  # Replace with the path to your dataset
df = pd.read_csv(file_path)

# Convert 'pickup_datetime' to datetime type
df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'], errors='coerce')

# Check for missing values
plt.figure(figsize=(10, 5))
sns.heatmap(df.isnull(), cbar=False, cmap='viridis')
plt.title('Missing Values Heatmap')
plt.show()

# Remove rows with missing or NaN values
df = df.dropna()

# Filter out invalid data
df = df[(df['fare_amount'] > 0)]
df = df[(df['pickup_longitude'].between(-180, 180)) & (df['pickup_latitude'].between(-90, 90))]
df = df[(df['dropoff_longitude'].between(-180, 180)) & (df['dropoff_latitude'].between(-90, 90))]

# Visualize the distribution of fare_amount
plt.figure(figsize=(10, 5))
sns.histplot(df['fare_amount'], kde=True, bins=50)
plt.title('Distribution of Fare Amount')
plt.xlabel('Fare Amount (USD)')
plt.show()

# Step 2: Identify outliers using IQR
Q1 = df['fare_amount'].quantile(0.25)
Q3 = df['fare_amount'].quantile(0.75)
IQR = Q3 - Q1
df = df[(df['fare_amount'] >= (Q1 - 1.5 * IQR)) & (df['fare_amount'] <= (Q3 + 1.5 * IQR))]

# Visualize the distribution after outlier removal
plt.figure(figsize=(10, 5))
sns.histplot(df['fare_amount'], kde=True, bins=50)
plt.title('Distribution of Fare Amount after Outlier Removal')
plt.xlabel('Fare Amount (USD)')
plt.show()

# Step 3: Check correlation
# Feature Engineering: Calculate distance between pickup and drop-off points
def haversine_distance(lat1, lon1, lat2, lon2):
    R = 6371  # Earth radius in kilometers
    lat1, lon1, lat2, lon2 = map(np.radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = np.sin(dlat/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon/2)**2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))
    return R * c

df['distance_km'] = haversine_distance(df['pickup_latitude'], df['pickup_longitude'],
                                       df['dropoff_latitude'], df['dropoff_longitude'])

# Visualize the distribution of distances
plt.figure(figsize=(10, 5))
sns.histplot(df['distance_km'], kde=True, bins=50)
plt.title('Distribution of Trip Distances')
plt.xlabel('Distance (km)')
plt.show()

# Step 4: Prepare data for model training (using only distance_km as a feature)
X = df[['distance_km']]
y = df['fare_amount']

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Visualize the relationship between distance and fare
plt.figure(figsize=(10, 5))
sns.scatterplot(x=X_train['distance_km'], y=y_train, alpha=0.3)
plt.title('Distance vs Fare Amount')
plt.xlabel('Distance (km)')
plt.ylabel('Fare Amount (USD)')
plt.show()

# Implement Linear Regression model
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)
y_pred_lr = linear_model.predict(X_test)

# Implement Random Forest Regression model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

# Step 5: Evaluate models
def evaluate_model(y_true, y_pred, model_name):
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    r2 = r2_score(y_true, y_pred)
    print(f'{model_name} Model Evaluation:')
    print(f'RMSE: {rmse:.2f}')
    print(f'RÂ² Score: {r2:.2f}\n')

evaluate_model(y_test, y_pred_lr, "Linear Regression")
evaluate_model(y_test, y_pred_rf, "Random Forest Regression")

# Plot actual vs predicted fares for Random Forest model
plt.figure(figsize=(14, 6))
plt.scatter(y_test, y_pred_rf, alpha=0.3, label='Predictions')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', label='Perfect Prediction')
plt.xlabel('Actual Fare Amount')
plt.ylabel('Predicted Fare Amount')
plt.title('Actual vs Predicted Fares (Random Forest)')
plt.legend()
plt.show()
